/* Do not edit this file!!! Edit config/config.yml instead! */

const fs = require('fs');

const dotenv = require('dotenv');
dotenv.config();

const YAML = require('yaml');
const YAMLMap = require('yaml/types').YAMLMap;
const YAMLPair = require('yaml/types').Pair;

let defaultStructure = [
	{
		comment: "Basic info",
		items: [
			{
				key: "blogName",
				envKey: "SITE_NAME",
				value: "My Blog Name"
			},{
				key: "authorName",
				envKey: "AUTHOR_NAME",
				value: "My Name Here"
			},{
				key: "authorLink",
				envKey: "AUTHOR_LINK",
				value: "",
				comment: "Enter your website, social media, etc. Some way for people to tell you they like your blog! (Leaving it empty is okay too)"
			}
		]
	},{
		comment: "Theme customization",
		items: [
			{
				key: "themeURL",
				envKey: "THEME_URL",
				value: "/style/neptune.css",
				comment: "Link to a theme file. Can be relative (on this server) or absolute (somewhere on the web)"
			},{
				key: "backgroundImage",
				envKey: "BG_IMAGE",
				value: "",
				comment: "Optional, uses theme default if left blank."
			},
		]
	},{
		comment: "Navigation",
		items: [
			{
				key: "headerLinks",
				envKey: "HEADER_LINKS",
				value: [
					{path: "/", name: "Home"},
					{path: "/archive", name: "Archive"},
					{path: "/about", name: "About"}
				]
			},{
				key: "recentPostsCutoff",
				envKey: "RECENT_POSTS",
				value: 3
			}
		]
	},{
		comment: "Behind the scenes stuff",
		items: [
			{
				key: "serverPort",
				envKey: "PORT",
				value: 5000
			},{
				key: "metaDescription",
				envKey: "SITE_DESCRIPTION",
				value: "Islet is a tiny blogging server designed to encourage creative fun on the internet!",
				comment: "This description is not directly visible on the page, but it can show up in certain places like search engines."
			},{
				key: "truncateSummaryAt",
				envKey: "SUMMARY_LENGTH",
				value: 280,
				comment: "Maximum length of the post summary that's used in the meta description tag for blog post pages."
			},{
				key: "language",
				envKey: "SITE_LANGUAGE",
				value: "en-US",
				comment: "The language you primarily write in. Not required but recommended."
			},{
				key: "blogURL",
				envKey: "SITE_URL",
				value: "",
				comment: "The web address of this blog, used for links in the RSS feed."
			}
		]
	}
];

let generateYamlConfig = () => {
	let config = new YAML.Document();
	config.commentBefore = " Edit the values below to customize your islet!";
	config.contents = new YAMLMap();

	for (var i=0,section; section=defaultStructure[i]; i++){
		for (var j=0,item; item=section.items[j]; j++){
			let pair = new YAMLPair(YAML.createNode(item.key), item.value);
			if (j == 0 && section.comment){
				pair.commentBefore = `# ${section.comment} ##`;
				if (i > 0){
					pair.spaceBefore = true;
				}
			}
			if (item.comment){
				pair.value = YAML.createNode(item.value);
				pair.value.comment = " " + item.comment;
			}
			config.contents.items.push(pair);
		}
	}
	return config.toString();
}

let makeConfigFile = () => {
	if (fs.existsSync('./config/config.yml')){
		return;
	}

	try { // Create the config folder if it doesn't exist
		fs.mkdirSync('./config');
	} catch (e){
		if (e.code !== "EEXIST"){
			console.error("Error when trying to create the config folder:");
			console.error(e);
			return;
		}
	}
	let config = generateYamlConfig();
	try { // Now create the config file
		if (!fs.existsSync('./config/config.yml')){
			fs.writeFileSync('./config/config.yml', config);
		}
	} catch (e){
		console.error("Error when trying to create the config file:");
		console.error(e);
	}
}

let readUserConfig = () => {
	try {
		return YAML.parse(fs.readFileSync('./config/config.yml', 'utf8'));
	} catch (e){
		console.error("Error when trying to read the config file:");
		console.error(e);
	}
}

let getEnvConfig = (defaultConf) => {
	let envConf = {};
	for (var section of defaultStructure){
		for (var item of section.items){
			let envValue = process.env[item.envKey];
			if (envValue){
				envConf[item.key] = envValue;
			}
		}
	}
	return Object.assign(defaultConf, envConf);
}

let init = () => {
	makeConfigFile();
	return getEnvConfig(readUserConfig());
}

module.exports = {init};




// This is to help when I eventually write or need to update the documentation :P
let makeTableForDocs = () => {
	console.log('| Config variable name | Environment variable name | Default value | Description |');
	console.log('|---|---|---|---|');
	for (var section of defaultStructure){
		for (var item of section.items){
			console.log(`| ${item.key} | ${item.envKey} | \`${JSON.stringify(item.value)}\` | ${item.comment || ''} |`);
		}
	}
}
